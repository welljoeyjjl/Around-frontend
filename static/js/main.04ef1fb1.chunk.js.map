{"version":3,"sources":["components/TopBar.js","constants.js","components/Register.js","components/Login.js","components/Main.js","components/App.js","serviceWorker.js","index.js","assets/images/logo.svg"],"names":["TopBar","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","src","logo","alt","React","Component","API_ROOT","RegistrationForm","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","_this","props","form","validateFieldsAndScroll","err","values","console","log","fetch","concat","method","body","JSON","stringify","username","password","then","response","ok","text","Error","statusText","data","message","success","catch","error","handleConfirmBlur","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","es_form","onSubmit","Item","assign","label","rules","required","input","validator","type","onBlur","offset","es_button","htmlType","Form","create","name","NormalLoginForm","prefix","icon","style","color","placeholder","href","Login","Main","App","TopBar_TopBar","Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.04ef1fb1.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from '../assets/images/logo.svg';\r\n\r\nexport class TopBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <div className=\"App-title\">Around</div>\r\n            </header>\r\n        );\r\n    }\r\n}","export const API_ROOT = 'https://around-75015.appspot.com/api/v1';\r\n","import React from 'react';\r\nimport { Form, Input, Button, message } from 'antd';\r\nimport { API_ROOT } from '../constants';\r\n\r\nclass RegistrationForm extends React.Component {\r\n    state = {\r\n        confirmDirty: false,\r\n        autoCompleteResult: [],\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n                // send request\r\n                fetch(`${API_ROOT}/signup`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        username: values.username,\r\n                        password: values.password,\r\n                    }),\r\n                }).then((response) => {\r\n                    if (response.ok) {\r\n                        return response.text();\r\n                    }\r\n                    throw new Error(response.statusText);\r\n                })\r\n                    .then((data) => {\r\n                        console.log(data);\r\n                        message.success('Registration Succeed!');\r\n                    })\r\n                    .catch((e) => {\r\n                        console.log(e);\r\n                        message.error('Registration Failed.');\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    handleConfirmBlur = (e) => {\r\n        const value = e.target.value;\r\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    }\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const form = this.props.form;\r\n        if (value && value !== form.getFieldValue('password')) {\r\n            callback('Two passwords that you enter is inconsistent!');\r\n        } else {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const form = this.props.form;\r\n        if (value && this.state.confirmDirty) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 8 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 16 },\r\n            },\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 24,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 16,\r\n                    offset: 8,\r\n                },\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Form onSubmit={this.handleSubmit} className=\"register\">\r\n                <Form.Item\r\n                    {...formItemLayout}\r\n                    label=\"Username\"\r\n                >\r\n                    {getFieldDecorator('username', {\r\n                        rules: [{ required: true, message: 'Please input your username!' }],\r\n                    })(\r\n                        <Input />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    {...formItemLayout}\r\n                    label=\"Password\"\r\n                >\r\n                    {getFieldDecorator('password', {\r\n                        rules: [{\r\n                            required: true, message: 'Please input your password!',\r\n                        }, {\r\n                            validator: this.validateToNextPassword,\r\n                        }],\r\n                    })(\r\n                        <Input type=\"password\" />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    {...formItemLayout}\r\n                    label=\"Confirm Password\"\r\n                >\r\n                    {getFieldDecorator('confirm', {\r\n                        rules: [{\r\n                            required: true, message: 'Please confirm your password!',\r\n                        }, {\r\n                            validator: this.compareToFirstPassword,\r\n                        }],\r\n                    })(\r\n                        <Input type=\"password\" onBlur={this.handleConfirmBlur} />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">Register</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Register = Form.create({ name: 'register' })(RegistrationForm);\r\n","import React from 'react';\r\nimport { Form, Icon, Input, Button, message } from 'antd';\r\nimport { API_ROOT } from '../constants';\r\n\r\nclass NormalLoginForm extends React.Component {\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n                fetch(`${API_ROOT}/login`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        username: values.username,\r\n                        password: values.password,\r\n                    }),\r\n                }).then((response) => {\r\n                    if (response.ok) {\r\n                        return response.text();\r\n                    }\r\n                    throw new Error(response.statusText);\r\n                }).then((data) => {\r\n                    message.success('Login Success!');\r\n                    console.log(data);\r\n                }).catch((e) => {\r\n                    console.log(e);\r\n                    message.error('Login Failed.');\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                <Form.Item>\r\n                    {getFieldDecorator('username', {\r\n                        rules: [{ required: true, message: 'Please input your username!' }],\r\n                    })(\r\n                        <Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Username\" />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [{ required: true, message: 'Please input your Password!' }],\r\n                    })(\r\n                        <Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"Password\" />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                        Log in\r\n                    </Button>\r\n                    Or <a href=\"\">register now!</a>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Login = Form.create({ name: 'normal_login' })(NormalLoginForm);","import React from 'react';\r\nimport { Register } from './Register.js';\r\nimport {Login} from \"./Login\";\r\n\r\nexport class Main extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <Login/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {TopBar} from './TopBar';\r\nimport {Main} from './Main.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          <TopBar/>\r\n          <Main/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}